// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patrols{
  id Int @id @unique @default(autoincrement())
  password String
  email String @unique
  name String
  mobile String
  role Role @default(patrol)
  vehicles Vehicles[] @relation("belongToPatrol")
  reports Reports[] @relation("writtenByPatrol")
  shifts Shifts[] @relation("logByPatrol")
  amendments Amendment[] @relation("submittedByPatrol")
  supervisorID Int? @unique
  supervisor Patrols? @relation("patrolSupervisor", fields: [supervisorID], references: [id])
  patrol Patrols? @relation("patrolSupervisor")
}

model Vehicles{
  id Int @id @unique @default(autoincrement())
  numberPlate String @unique
  registration String
  make String
  model String
  patrolID Int
  patrols Patrols @relation("belongToPatrol", fields: [patrolID], references: [id])
  shifts Shifts[] @relation("isInShift")
  inAmendment Amendment[] @relation("isInAmendment")
}

model Reports{
  id Int @id @unique @default(autoincrement())
  title String
  createdAt DateTime @default(now())
  location String
  patrolID Int
  reportIncidentType String
  patrols Patrols @relation("writtenByPatrol", fields: [patrolID], references: [id])
  incident IncidentType @relation("isIncidentOfType",fields: [reportIncidentType], references: [incidentType])
}

model IncidentType{
  incidentType String @id @unique
  description String
  reports Reports[] @relation("isIncidentOfType")
}

model Shifts {
  id Int @default(autoincrement())
  type logType 
  logAt DateTime @default(now())
  expectedHours Decimal?
  actualHours Decimal?
  policeStationBase String
  cpCallSign String
  logPatrolId Int
  patrols Patrols @relation("logByPatrol", fields: [logPatrolId], references: [id])
  otherPatrolsName String
  vehicleId Int
  vehicles Vehicles @relation("isInShift", fields: [vehicleId], references: [id])
  hasLiveryOrSignage Boolean
  hasPoliceRadio Boolean
  hasAmendment Amendment[] @relation("belongToShift")
  @@id([id, type])
}

model Amendment {
  id Int @id @unique @default(autoincrement())
  amendmentMadeAt DateTime @default(now())
  shiftHoursChange Decimal?
  policeStationBase String?
  cpCallSign String?
  amendmentPatrolId Int
  patrols Patrols @relation("submittedByPatrol", fields: [amendmentPatrolId], references: [id])
  otherPatrolsName String?
  vehicleId Int
  vehicles Vehicles @relation("isInAmendment", fields: [vehicleId], references: [id])
  hasLiveryOrSignage Boolean?
  hasPoliceRadio Boolean?
  shiftId Int
  shiftType logType @default(logOn)
  logOn Shifts @relation("belongToShift", fields: [shiftId, shiftType], references: [id, type])
}

enum Role {
  patrol
  lead
  admin
}

enum logType {
  logOn
  logOff
}